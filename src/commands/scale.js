const {getUserRecipes  } = require('../database/recipeService');
const { scaleRecipe } = require('../services/recipeScaler');

const scaleCommand = async (ctx) => {
    try {
        const recipes = await getUserRecipes(ctx.dbUser.id, 8);
        if(recipes.length === 0 ){
            await ctx.reply(`‚öñÔ∏è *Recipe Scaling Center* ‚öñÔ∏è

üìö **No recipes found in your collection!**

üç≥ *Send me cooking videos to build your recipe collection first!*
‚öñÔ∏è *Then you can scale any recipe for different serving sizes!*

üåø *Your culinary scaling adventure awaits!* ‚ú®`,
                { parse_mode: 'Markdown' });
            return;
        }

        let message = `‚öñÔ∏è *Recipe Scaling Center* ‚öñÔ∏è\n\n`;
        message += `üéØ **Scale your recipes for perfect portions!**\n\n`;
        message += `üìù **Select a recipe to scale:**\n\n`;

        const recipeButtons = [];
        recipes.forEach((recipe, index) => {
            const date = new Date(recipe.created_at).toLocaleDateString();
            const currentServings = recipe.servings || 'Unknown';

            message += `${index + 1}. **${recipe.title}**\n`;
            message += `   üçΩÔ∏è Serves: ${currentServings} ‚Ä¢ üìÖ ${date}\n\n`;

            recipeButtons.push([
                { text: `‚öñÔ∏è Scale Recipe ${index + 1}`, callback_data: `scale_recipe_${recipe.id}` }
            ]);
        })

        message += `üîß **What scaling does:**\n`;
        message += `‚Ä¢ üìä Adjusts ingredient quantities\n`;
        message += `‚Ä¢ ‚è±Ô∏è Estimates new cooking times\n`;
        message += `‚Ä¢ üç≥ Recommends equipment sizes\n`;
        message += `‚Ä¢ üìê Smart unit conversions\n\n`;
        message += `üåø *Perfect portions for any occasion!* ‚ú®`;

        const actionButtons = [
            [
                { text: 'üìñ How Scaling Works', callback_data: 'scaling_help' },
                { text: 'üî¢ Quick Scale Tips', callback_data: 'scaling_tips' }
            ]
        ]

        await ctx.reply(message, {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [...recipeButtons, ...actionButtons]
            }
        });


    } catch (error) {
        console.error('Scale command error:', error);
        await ctx.reply('üêõ Error accessing scaling center! Please try again.');
    }
}

const setupScaleHandlers = (bot) => {
    bot.action('scaling_help', async (ctx) => {
        await ctx.answerCbQuery('üìñ Loading scaling guide...');

        const helpMessage = `üìñ **How Recipe Scaling Works** üìñ

‚öñÔ∏è **Smart Scaling Process:**

üî¢ **1. Ingredient Scaling:**
‚Ä¢ Multiplies all quantities proportionally
‚Ä¢ Handles fractions and decimals intelligently
‚Ä¢ Converts units when needed (cups ‚Üî tablespoons)
‚Ä¢ Rounds to practical cooking measurements

‚è±Ô∏è **2. Time Adjustments:**
‚Ä¢ **Prep time:** Scales linearly (more ingredients = more prep)
‚Ä¢ **Cook time:** Smart scaling (baking times change differently)
‚Ä¢ **Rest time:** Usually stays the same

üç≥ **3. Equipment Recommendations:**
‚Ä¢ Suggests larger pans for bigger portions
‚Ä¢ Recommends pot sizes for scaled liquids
‚Ä¢ Warns about oven capacity limits

üìê **4. Smart Conversions:**
‚Ä¢ 1 cup = 16 tablespoons = 48 teaspoons
‚Ä¢ Converts between metric and imperial
‚Ä¢ Handles weight vs volume intelligently

‚ö° **Quick Scale Options:**
‚Ä¢ **0.5x** - Half portions
‚Ä¢ **1x** - Original recipe
‚Ä¢ **2x** - Double portions  
‚Ä¢ **4x** - Quadruple portions
‚Ä¢ **Custom** - Any specific number

üåø *Scaling makes any recipe perfect for your needs!* ‚ú®`;

        await ctx.reply(helpMessage, {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [{ text: '‚¨ÖÔ∏è Back to Scaling', callback_data: 'back_to_scaling' }]
                ]
            }
        });
    });

    bot.action('scaling_tips', async (ctx) => {
        await ctx.answerCbQuery('üî¢ Loading scaling tips...');

        const tipsMessage = `üî¢ **Pro Scaling Tips** üî¢

üí° **Smart Scaling Guidelines:**

üßÇ **Seasonings & Spices:**
‚Ä¢ Scale salt/pepper conservatively (taste and adjust)
‚Ä¢ Strong spices: Scale by 0.8x instead of full multiplier
‚Ä¢ Fresh herbs: Scale normally, dried herbs more conservatively

ü•ò **Cooking Techniques:**
‚Ä¢ **Saut√©ing:** May need larger pan or cook in batches
‚Ä¢ **Baking:** Times change more with 4x+ scaling
‚Ä¢ **Deep frying:** Oil ratios don't scale linearly

‚è±Ô∏è **Time Scaling Rules:**
‚Ä¢ **Prep time:** Usually scales 1:1
‚Ä¢ **Searing/browning:** Doesn't scale much
‚Ä¢ **Simmering:** Scales but levels off at larger quantities
‚Ä¢ **Baking:** Complex - depends on pan size and thickness

üç≥ **Equipment Scaling:**
‚Ä¢ **2x recipe:** Usually needs next pan size up
‚Ä¢ **4x recipe:** May need commercial-sized equipment
‚Ä¢ **Oven space:** Consider cooking in batches

üìè **Best Practice:**
‚Ä¢ Start with 2x scaling to learn the recipe
‚Ä¢ Taste and adjust seasonings after scaling
‚Ä¢ Consider equipment limitations
‚Ä¢ Some recipes work better scaled than others

üåø *Master these tips for perfect scaled recipes!* ‚ú®`;

        await ctx.reply(tipsMessage, {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [{ text: '‚¨ÖÔ∏è Back to Scaling', callback_data: 'back_to_scaling' }]
                ]
            }
        });
    });

    bot.action('back_to_scaling', async (ctx) => {
        await ctx.answerCbQuery('‚öñÔ∏è Back to scaling center');
        await ctx.deleteMessage();
        await scaleCommand(ctx);
    });
}

module.exports = {
    scaleCommand,
    setupScaleHandlers
}