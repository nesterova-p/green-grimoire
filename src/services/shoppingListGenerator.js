const { query } = require('../database/connection');

const INGREDIENT_CATEGORIES = {
    'produce': {
        name: 'ü•¨ Produce',
        keywords: [
            // English
            'onion', 'garlic', 'tomato', 'carrot', 'broccoli', 'spinach', 'lettuce', 'potato',
            'bell pepper', 'cucumber', 'celery', 'mushrooms', 'lemon', 'lime', 'apple', 'banana',
            'herbs', 'cilantro', 'parsley', 'basil', 'ginger', 'scallions', 'avocado', 'cabbage',
            'zucchini', 'eggplant', 'cauliflower', 'kale', 'arugula', 'fennel', 'leek', 'radish',

            // Ukrainian
            '—Ü–∏–±—É–ª—è', '—á–∞—Å–Ω–∏–∫', '–ø–æ–º—ñ–¥–æ—Ä', '–º–æ—Ä–∫–≤–∞', '–±—Ä–æ–∫–æ–ª—ñ', '—à–ø–∏–Ω–∞—Ç', '—Å–∞–ª–∞—Ç', '–∫–∞—Ä—Ç–æ–ø–ª—è',
            '–ø–µ—Ä–µ—Ü—å', '–æ–≥—ñ—Ä–æ–∫', '—Å–µ–ª–µ—Ä–∞', '–≥—Ä–∏–±–∏', '–ª–∏–º–æ–Ω', '–ª–∞–π–º', '—è–±–ª—É–∫–æ', '–±–∞–Ω–∞–Ω',
            '–∑–µ–ª–µ–Ω—å', '–∫—ñ–Ω–∑–∞', '–ø–µ—Ç—Ä—É—à–∫–∞', '–±–∞–∑–∏–ª—ñ–∫', '—ñ–º–±–∏—Ä', '–∑–µ–ª–µ–Ω–∞ —Ü–∏–±—É–ª—è', '–∞–≤–æ–∫–∞–¥–æ', '–∫–∞–ø—É—Å—Ç–∞',
            '–∫–∞–±–∞—á–æ–∫', '–±–∞–∫–ª–∞–∂–∞–Ω', '—Ü–≤—ñ—Ç–Ω–∞ –∫–∞–ø—É—Å—Ç–∞', '–∫–µ–π–ª', '—Ä—É–∫–∫–æ–ª–∞', '—Ñ–µ–Ω—Ö–µ–ª—å', '–ø–æ—Ä–µ–π', '—Ä–µ–¥–∏—Å–∫–∞',
            '–±—É—Ä—è–∫', '—Ä—ñ–ø–∞', '—Ä–µ–¥—å–∫–∞', '–ø–∞—Å—Ç–µ—Ä–Ω–∞–∫', '—Ç–æ–ø—ñ–Ω–∞–º–±—É—Ä', '–∫—Ä—ñ–ø', '–∫—Ä–æ–ø–∏–≤–∞', '—â–∞–≤–µ–ª—å',

            // Polish
            'cebula', 'czosnek', 'pomidor', 'marchew', 'broku≈Çy', 'szpinak', 'sa≈Çata', 'ziemniak',
            'papryka', 'og√≥rek', 'seler', 'grzyby', 'cytryna', 'limonka', 'jab≈Çko', 'banan',
            'zio≈Ça', 'kolendra', 'pietruszka', 'bazylia', 'imbir', 'szczypiorek', 'awokado', 'kapusta',

            // Russian
            '–ª—É–∫', '—á–µ—Å–Ω–æ–∫', '—Ç–æ–º–∞—Ç', '–º–æ—Ä–∫–æ–≤—å', '–±—Ä–æ–∫–∫–æ–ª–∏', '—à–ø–∏–Ω–∞—Ç', '—Å–∞–ª–∞—Ç', '–∫–∞—Ä—Ç–æ—Ñ–µ–ª—å',
            '–ø–µ—Ä–µ—Ü', '–æ–≥—É—Ä–µ—Ü', '—Å–µ–ª—å–¥–µ—Ä–µ–π', '–≥—Ä–∏–±—ã', '–ª–∏–º–æ–Ω', '–ª–∞–π–º', '—è–±–ª–æ–∫–æ', '–±–∞–Ω–∞–Ω',
            '–∑–µ–ª–µ–Ω—å', '–∫–∏–Ω–∑–∞', '–ø–µ—Ç—Ä—É—à–∫–∞', '–±–∞–∑–∏–ª–∏–∫', '–∏–º–±–∏—Ä—å', '–∑–µ–ª–µ–Ω—ã–π –ª—É–∫', '–∞–≤–æ–∫–∞–¥–æ', '–∫–∞–ø—É—Å—Ç–∞'
        ]
    },
    'meat': {
        name: 'ü•© Meat & Seafood',
        keywords: [
            // English
            'chicken', 'beef', 'pork', 'fish', 'salmon', 'tuna', 'shrimp', 'turkey', 'lamb',
            'bacon', 'sausage', 'ground beef', 'ground turkey', 'cod', 'tilapia', 'crab', 'lobster',
            'duck', 'goose', 'venison', 'rabbit', 'ham', 'prosciutto', 'chorizo',

            // Ukrainian
            '–∫—É—Ä–∫–∞', '—è–ª–æ–≤–∏—á–∏–Ω–∞', '—Å–≤–∏–Ω–∏–Ω–∞', '—Ä–∏–±–∞', '–ª–æ—Å–æ—Å—å', '—Ç—É–Ω–µ—Ü—å', '–∫—Ä–µ–≤–µ—Ç–∫–∏', '—ñ–Ω–¥–∏—á–∫–∞', '–±–∞—Ä–∞–Ω–∏–Ω–∞',
            '–±–µ–∫–æ–Ω', '–∫–æ–≤–±–∞—Å–∞', '—Ñ–∞—Ä—à —è–ª–æ–≤–∏—á–∏–π', '—Ñ–∞—Ä—à —ñ–Ω–¥–∏—á–∏–π', '—Ç—Ä—ñ—Å–∫–∞', '—Ç–∏–ª–∞–ø—ñ—è', '–∫—Ä–∞–±', '–æ–º–∞—Ä',
            '–∫–∞—á–∫–∞', '–≥—É—Å—å', '–æ–ª–µ–Ω–∏–Ω–∞', '–∫—Ä–æ–ª–∏–∫', '—à–∏–Ω–∫–∞', '–ø—Ä–æ—à—É—Ç—Ç–æ', '—á–æ—Ä—ñ–∑–æ', '–∫—É—Ä—è—Ç–∏–Ω–∞',
            '–º\'—è—Å–æ', '—Ç–µ–ª—è—Ç–∏–Ω–∞', '–ø–µ—á—ñ–Ω–∫–∞', '—Å–µ—Ä—Ü–µ', '–Ω–∏—Ä–∫–∏', '–º—ñ–¥—ñ—ó', '—É—Å—Ç—Ä–∏—Ü—ñ', '–∫–∞–ª—å–º–∞—Ä',
            '–æ—Å—å–º–∏–Ω–æ–≥', '–æ–∫—É–Ω—å', '–∫–∞—Ä–ø', '—â—É–∫–∞', '—Å—É–¥–∞–∫', '—Ñ–æ—Ä–µ–ª—å', '—Å–∫—É–º–±—Ä—ñ—è', '—Å–µ–ª—å–¥—å',

            // Polish
            'kurczak', 'wo≈Çowina', 'wieprzowina', 'ryba', '≈Çoso≈õ', 'tu≈Ñczyk', 'krewetki', 'indyk', 'baranina',
            'bekon', 'kie≈Çbasa', 'mielona wo≈Çowina', 'mielony indyk', 'dorsz', 'tilapia', 'krab', 'homar',

            // Russian
            '–∫—É—Ä–∏—Ü–∞', '–≥–æ–≤—è–¥–∏–Ω–∞', '—Å–≤–∏–Ω–∏–Ω–∞', '—Ä—ã–±–∞', '–ª–æ—Å–æ—Å—å', '—Ç—É–Ω–µ—Ü', '–∫—Ä–µ–≤–µ—Ç–∫–∏', '–∏–Ω–¥–µ–π–∫–∞', '–±–∞—Ä–∞–Ω–∏–Ω–∞',
            '–±–µ–∫–æ–Ω', '–∫–æ–ª–±–∞—Å–∞', '—Ñ–∞—Ä—à –≥–æ–≤—è–∂–∏–π', '—Ñ–∞—Ä—à –∏–Ω–¥—é—à–∏–Ω—ã–π', '—Ç—Ä–µ—Å–∫–∞', '—Ç–∏–ª–∞–ø–∏—è', '–∫—Ä–∞–±', '–æ–º–∞—Ä'
        ]
    },
    'dairy': {
        name: 'ü•õ Dairy & Eggs',
        keywords: [
            // English
            'milk', 'cheese', 'butter', 'cream', 'yogurt', 'eggs', 'sour cream', 'cream cheese',
            'mozzarella', 'cheddar', 'parmesan', 'cottage cheese', 'ricotta', 'feta', 'goat cheese',
            'heavy cream', 'half and half', 'buttermilk', 'kefir', 'cr√®me fra√Æche',

            // Ukrainian
            '–º–æ–ª–æ–∫–æ', '—Å–∏—Ä', '–º–∞—Å–ª–æ', '–≤–µ—Ä—à–∫–∏', '–π–æ–≥—É—Ä—Ç', '—è–π—Ü—è', '—Å–º–µ—Ç–∞–Ω–∞', '–≤–µ—Ä—à–∫–æ–≤–∏–π —Å–∏—Ä',
            '–º–æ—Ü–∞—Ä–µ–ª–∞', '—á–µ–¥–¥–µ—Ä', '–ø–∞—Ä–º–µ–∑–∞–Ω', '—Å–∏—Ä –∫–∏—Å–ª–æ–º–æ–ª–æ—á–Ω–∏–π', '—Ä—ñ–∫–æ—Ç–∞', '—Ñ–µ—Ç–∞', '–∫–æ–∑—è—á–∏–π —Å–∏—Ä',
            '–∂–∏—Ä–Ω—ñ –≤–µ—Ä—à–∫–∏', '–∫–µ—Ñ—ñ—Ä', '–∫—Ä–µ–º —Ñ—Ä–µ—à', '—Ä—è–∂–∞–Ω–∫–∞', '–ø—Ä–æ—Å—Ç–æ–∫–≤–∞—à–∞', '—Ç–≤–æ—Ä–æ–≥', '–±—Ä–∏–Ω–∑–∞',
            '–º–∞—Å–∫–∞—Ä–ø–æ–Ω–µ', '–≥–æ—Ä–≥–æ–Ω–∑–æ–ª–∞', '–∫–∞–º–∞–º–±–µ—Ä', '–±—Ä–∏', '–ø–µ—Ä–µ–ø–µ–ª–∏–Ω—ñ —è–π—Ü—è', '–∫–∞—á–∏–Ω—ñ —è–π—Ü—è',

            // Polish
            'mleko', 'ser', 'mas≈Ço', '≈õmietana', 'jogurt', 'jajka', 'kwa≈õna ≈õmietana', 'serek ≈õmietankowy',
            'mozzarella', 'cheddar', 'parmezan', 'twar√≥g', 'ricotta', 'feta', 'kozi ser',

            // Russian
            '–º–æ–ª–æ–∫–æ', '—Å—ã—Ä', '–º–∞—Å–ª–æ', '—Å–ª–∏–≤–∫–∏', '–π–æ–≥—É—Ä—Ç', '—è–π—Ü–∞', '—Å–º–µ—Ç–∞–Ω–∞', '—Å–ª–∏–≤–æ—á–Ω—ã–π —Å—ã—Ä',
            '–º–æ—Ü–∞—Ä–µ–ª–ª–∞', '—á–µ–¥–¥–µ—Ä', '–ø–∞—Ä–º–µ–∑–∞–Ω', '—Ç–≤–æ—Ä–æ–≥', '—Ä–∏–∫–æ—Ç—Ç–∞', '—Ñ–µ—Ç–∞', '–∫–æ–∑–∏–π —Å—ã—Ä'
        ]
    },
    'pantry': {
        name: 'üè† Pantry & Dry Goods',
        keywords: [
            // English
            'rice', 'pasta', 'flour', 'sugar', 'salt', 'pepper', 'oil', 'vinegar', 'soy sauce',
            'honey', 'spices', 'beans', 'lentils', 'quinoa', 'oats', 'nuts', 'almonds', 'walnuts',
            'olive oil', 'vegetable oil', 'coconut oil', 'baking powder', 'baking soda', 'vanilla',
            'cinnamon', 'paprika', 'oregano', 'thyme', 'rosemary', 'bay leaves', 'cumin', 'turmeric',

            // Ukrainian
            '—Ä–∏—Å', '–º–∞–∫–∞—Ä–æ–Ω–∏', '–±–æ—Ä–æ—à–Ω–æ', '—Ü—É–∫–æ—Ä', '—Å—ñ–ª—å', '–ø–µ—Ä–µ—Ü—å', '–æ–ª—ñ—è', '–æ—Ü–µ—Ç', '—Å–æ—î–≤–∏–π —Å–æ—É—Å',
            '–º–µ–¥', '—Å–ø–µ—Ü—ñ—ó', '–∫–≤–∞—Å–æ–ª—è', '—Å–æ—á–µ–≤–∏—Ü—è', '–∫—ñ–Ω–æ–∞', '–≤—ñ–≤—Å—è–Ω–∫–∞', '–≥–æ—Ä—ñ—Ö–∏', '–º–∏–≥–¥–∞–ª—å', '–≤–æ–ª–æ—Å—å–∫—ñ –≥–æ—Ä—ñ—Ö–∏',
            '–æ–ª–∏–≤–∫–æ–≤–∞ –æ–ª—ñ—è', '—Ä–æ—Å–ª–∏–Ω–Ω–∞ –æ–ª—ñ—è', '–∫–æ–∫–æ—Å–æ–≤–∞ –æ–ª—ñ—è', '—Ä–æ–∑–ø—É—à—É–≤–∞—á', '—Å–æ–¥–∞', '–≤–∞–Ω—ñ–ª—å',
            '–∫–æ—Ä–∏—Ü—è', '–ø–∞–ø—Ä–∏–∫–∞', '–æ—Ä–µ–≥–∞–Ω–æ', '—á–µ–±—Ä–µ—Ü—å', '—Ä–æ–∑–º–∞—Ä–∏–Ω', '–ª–∞–≤—Ä–æ–≤–∏–π –ª–∏—Å—Ç', '–∫—É–º—ñ–Ω', '–∫—É—Ä–∫—É–º–∞',
            '–≥—Ä–µ—á–∫–∞', '–ø—à–æ–Ω–æ', '—è—á–º—ñ–Ω—å', '–ø–µ—Ä–ª–æ–≤–∞ –∫—Ä—É–ø–∞', '–º–∞–Ω–∫–∞', '–∫—É–∫—É—Ä—É–¥–∑—è–Ω–∞ –∫—Ä—É–ø–∞', '–±—É–ª–≥—É—Ä',
            '–≥—ñ—Ä—á–∏—Ü—è', '–∫–µ—Ç—á—É–ø', '–º–∞–π–æ–Ω–µ–∑', '—Ç–æ–º–∞—Ç–Ω–∞ –ø–∞—Å—Ç–∞', '—Ç–æ–º–∞—Ç–Ω–∏–π —Å–æ—É—Å', '–∞–¥–∂–∏–∫–∞', '—Ö—Ä—ñ–Ω',
            '–ª–∞–≤—Ä–æ–≤–∏–π –ª–∏—Å—Ç', '–≥–≤–æ–∑–¥–∏–∫–∞', '–º—É—Å–∫–∞—Ç–Ω–∏–π –≥–æ—Ä—ñ—Ö', '–∫–∞—Ä–¥–∞–º–æ–Ω', '–±–∞–¥—å—è–Ω', '—Ñ–µ–Ω—Ö–µ–ª—å',

            // Polish
            'ry≈º', 'makaron', 'mƒÖka', 'cukier', 's√≥l', 'pieprz', 'olej', 'ocet', 'sos sojowy',
            'mi√≥d', 'przyprawy', 'fasola', 'soczewica', 'quinoa', 'p≈Çatki owsiane', 'orzechy', 'migda≈Çy', 'orzechy w≈Çoskie',

            // Russian
            '—Ä–∏—Å', '–º–∞–∫–∞—Ä–æ–Ω—ã', '–º—É–∫–∞', '—Å–∞—Ö–∞—Ä', '—Å–æ–ª—å', '–ø–µ—Ä–µ—Ü', '–º–∞—Å–ª–æ', '—É–∫—Å—É—Å', '—Å–æ–µ–≤—ã–π —Å–æ—É—Å',
            '–º—ë–¥', '—Å–ø–µ—Ü–∏–∏', '—Ñ–∞—Å–æ–ª—å', '—á–µ—á–µ–≤–∏—Ü–∞', '–∫–∏–Ω–æ–∞', '–æ–≤—Å—è–Ω–∫–∞', '–æ—Ä–µ—Ö–∏', '–º–∏–Ω–¥–∞–ª—å', '–≥—Ä–µ—Ü–∫–∏–µ –æ—Ä–µ—Ö–∏'
        ]
    },
    'frozen': {
        name: 'üßä Frozen',
        keywords: [
            // English
            'frozen', 'ice cream', 'frozen vegetables', 'frozen fruit', 'frozen fish', 'frozen chicken',
            'ice', 'sorbet', 'frozen berries', 'frozen peas', 'frozen corn', 'frozen spinach',

            // Ukrainian
            '–∑–∞–º–æ—Ä–æ–∂–µ–Ω–∏–π', '–º–æ—Ä–æ–∑–∏–≤–æ', '–∑–∞–º–æ—Ä–æ–∂–µ–Ω—ñ –æ–≤–æ—á—ñ', '–∑–∞–º–æ—Ä–æ–∂–µ–Ω—ñ —Ñ—Ä—É–∫—Ç–∏', '–∑–∞–º–æ—Ä–æ–∂–µ–Ω–∞ —Ä–∏–±–∞', '–∑–∞–º–æ—Ä–æ–∂–µ–Ω–∞ –∫—É—Ä–∫–∞',
            '–ª—ñ–¥', '—Å–æ—Ä–±–µ—Ç', '–∑–∞–º–æ—Ä–æ–∂–µ–Ω—ñ —è–≥–æ–¥–∏', '–∑–∞–º–æ—Ä–æ–∂–µ–Ω–∏–π –≥–æ—Ä–æ—à–æ–∫', '–∑–∞–º–æ—Ä–æ–∂–µ–Ω–∞ –∫—É–∫—É—Ä—É–¥–∑–∞', '–∑–∞–º–æ—Ä–æ–∂–µ–Ω–∏–π —à–ø–∏–Ω–∞—Ç',
            '–∑–∞–º–æ—Ä–æ–∂–µ–Ω–∏–π', '–ª—å–æ–¥—è–Ω–∏–∫–∏', '—Ñ—Ä—É–∫—Ç–æ–≤–∏–π –ª—ñ–¥', '–∑–∞–º–æ—Ä–æ–∂–µ–Ω–∞ —Å—É–º—ñ—à', '–∑–∞–º–æ—Ä–æ–∂–µ–Ω—ñ –∫—Ä–µ–≤–µ—Ç–∫–∏',

            // Polish
            'mro≈ºony', 'lody', 'mro≈ºone warzywa', 'mro≈ºone owoce', 'mro≈ºona ryba', 'mro≈ºony kurczak',
            'l√≥d', 'sorbet', 'mro≈ºone jagody', 'mro≈ºony groszek', 'mro≈ºona kukurydza', 'mro≈ºony szpinak',

            // Russian
            '–∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–π', '–º–æ—Ä–æ–∂–µ–Ω–æ–µ', '–∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ –æ–≤–æ—â–∏', '–∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ —Ñ—Ä—É–∫—Ç—ã', '–∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω–∞—è —Ä—ã–±–∞', '–∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω–∞—è –∫—É—Ä–∏—Ü–∞',
            '–ª—ë–¥', '—Å–æ—Ä–±–µ—Ç', '–∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ —è–≥–æ–¥—ã', '–∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–π –≥–æ—Ä–æ—à–µ–∫', '–∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω–∞—è –∫—É–∫—É—Ä—É–∑–∞', '–∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–π —à–ø–∏–Ω–∞—Ç'
        ]
    },
    'bakery': {
        name: 'üçû Bakery',
        keywords: [
            // English
            'bread', 'bagels', 'rolls', 'tortillas', 'pita', 'baguette', 'croissant', 'muffins',
            'donuts', 'cookies', 'cake', 'pastry', 'crackers', 'pretzels',

            // Ukrainian
            '—Ö–ª—ñ–±', '–±–µ–π–≥–ª–∏', '–±—É–ª–æ—á–∫–∏', '—Ç–æ—Ä—Ç—ñ–ª—å—è', '–ø—ñ—Ç–∞', '–±–∞–≥–µ—Ç', '–∫—Ä—É–∞—Å–∞–Ω', '–º–∞—Ñ—Ñ—ñ–Ω–∏',
            '–ø–æ–Ω—á–∏–∫–∏', '–ø–µ—á–∏–≤–æ', '—Ç–æ—Ä—Ç', '–≤–∏–ø—ñ—á–∫–∞', '–∫—Ä–µ–∫–µ—Ä–∏', '–∫—Ä–µ–Ω–¥–µ–ª—å', '–ª–∞–≤–∞—à', '–±–∞—Ç–æ–Ω',
            '—Ö–ª—ñ–±–µ—Ü—å', '—Å—É—Ö–∞—Ä—ñ', '–±—ñ—Å–∫–≤—ñ—Ç', '–∫–µ–∫—Å', '—Ä–æ–≥–∞–ª–∏–∫', '—Å–ª–æ–π–∫–∞', '–µ—à–∫–ª–µ—Ä', '—Ç–∞—Ä—Ç–∞–ª–µ—Ç–∫–∞',

            // Polish
            'chleb', 'bagietki', 'bu≈Çki', 'tortille', 'pita', 'bagietka', 'croissant', 'muffiny',
            'pƒÖczki', 'ciastka', 'ciasto', 'ciastko', 'krakersy', 'precle',

            // Russian
            '—Ö–ª–µ–±', '–±–µ–π–≥–ª—ã', '–±—É–ª–æ—á–∫–∏', '—Ç–æ—Ä—Ç–∏–ª—å–∏', '–ø–∏—Ç–∞', '–±–∞–≥–µ—Ç', '–∫—Ä—É–∞—Å—Å–∞–Ω', '–º–∞—Ñ—Ñ–∏–Ω—ã',
            '–ø–æ–Ω—á–∏–∫–∏', '–ø–µ—á–µ–Ω—å–µ', '—Ç–æ—Ä—Ç', '–≤—ã–ø–µ—á–∫–∞', '–∫—Ä–µ–∫–µ—Ä—ã', '–∫—Ä–µ–Ω–¥–µ–ª–∏'
        ]
    },
    'beverages': {
        name: 'ü•§ Beverages',
        keywords: [
            // English
            'water', 'juice', 'coffee', 'tea', 'wine', 'beer', 'soda', 'sparkling water',
            'milk', 'smoothie', 'energy drink', 'sports drink', 'coconut water', 'kombucha',

            // Ukrainian
            '–≤–æ–¥–∞', '—Å—ñ–∫', '–∫–∞–≤–∞', '—á–∞–π', '–≤–∏–Ω–æ', '–ø–∏–≤–æ', '–≥–∞–∑–æ–≤–∞–Ω–∞ –≤–æ–¥–∞', '–≥–∞–∑–æ–≤–∫–∞',
            '–º–æ–ª–æ–∫–æ', '—Å–º—É–∑—ñ', '–µ–Ω–µ—Ä–≥–µ—Ç–∏—á–Ω–∏–π –Ω–∞–ø—ñ–π', '—Å–ø–æ—Ä—Ç–∏–≤–Ω–∏–π –Ω–∞–ø—ñ–π', '–∫–æ–∫–æ—Å–æ–≤–∞ –≤–æ–¥–∞', '–∫–æ–º–±—É—á–∞',
            '–º—ñ–Ω–µ—Ä–∞–ª—å–Ω–∞ –≤–æ–¥–∞', '–∫–≤–∞—Å', '–º–æ—Ä—Å', '–∫–æ–º–ø–æ—Ç', '—É–∑–≤–∞—Ä', '–ª–∏–º–æ–Ω–∞–¥', '–∫–æ–∫–∞-–∫–æ–ª–∞',
            '–ø–µ–ø—Å—ñ', '—Ñ–∞–Ω—Ç–∞', '—Å–ø—Ä–∞–π—Ç', '—Ä–µ–¥ –±—É–ª–ª', '–≥–æ—Ä—ñ–ª–∫–∞', '–∫–æ–Ω—å—è–∫', '–≤—ñ—Å–∫—ñ', '—Ä–æ–º',

            // Polish
            'woda', 'sok', 'kawa', 'herbata', 'wino', 'piwo', 'gazowana woda', 'nap√≥j gazowany',
            'mleko', 'smoothie', 'nap√≥j energetyczny', 'nap√≥j sportowy', 'woda kokosowa', 'kombucha',

            // Russian
            '–≤–æ–¥–∞', '—Å–æ–∫', '–∫–æ—Ñ–µ', '—á–∞–π', '–≤–∏–Ω–æ', '–ø–∏–≤–æ', '–≥–∞–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–æ–¥–∞', '–≥–∞–∑–∏—Ä–æ–≤–∫–∞',
            '–º–æ–ª–æ–∫–æ', '—Å–º—É–∑–∏', '—ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π –Ω–∞–ø–∏—Ç–æ–∫', '—Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –Ω–∞–ø–∏—Ç–æ–∫', '–∫–æ–∫–æ—Å–æ–≤–∞—è –≤–æ–¥–∞', '–∫–æ–º–±—É—á–∞'
        ]
    },
    'condiments': {
        name: 'üçØ Condiments & Sauces',
        keywords: [
            // English
            'ketchup', 'mustard', 'mayo', 'mayonnaise', 'hot sauce', 'barbecue sauce', 'salad dressing',
            'ranch', 'caesar', 'italian dressing', 'balsamic', 'worcestershire', 'fish sauce', 'teriyaki',

            // Ukrainian
            '–∫–µ—Ç—á—É–ø', '–≥—ñ—Ä—á–∏—Ü—è', '–º–∞–π–æ–Ω–µ–∑', '–≥–æ—Å—Ç—Ä–∏–π —Å–æ—É—Å', '—Å–æ—É—Å –±–∞—Ä–±–µ–∫—é', '–∑–∞–ø—Ä–∞–≤–∫–∞ –¥–ª—è —Å–∞–ª–∞—Ç—É',
            '—Ä–∞–Ω—á', '—Ü–µ–∑–∞—Ä', '—ñ—Ç–∞–ª—ñ–π—Å—å–∫–∞ –∑–∞–ø—Ä–∞–≤–∫–∞', '–±–∞–ª—å–∑–∞–º—ñ–∫', '–≤—É—Å—Ç–µ—Ä—à–∏—Ä—Å—å–∫–∏–π —Å–æ—É—Å', '—Ä–∏–±–Ω–∏–π —Å–æ—É—Å', '—Ç–µ—Ä—ñ—è–∫—ñ',
            '–∞–¥–∂–∏–∫–∞', '—Ö—Ä—ñ–Ω', '–≤–∞—Å–∞–±—ñ', '—Ç–∞–±–∞—Å–∫–æ', '—à—Ä—ñ—Ä–∞—á–∞', '—á—ñ–ª—ñ —Å–æ—É—Å', '—Ç–æ–º–∞—Ç–Ω–∏–π —Å–æ—É—Å',
            '–ø–µ—Å—Ç–æ', '—Ç–∞—Ä-—Ç–∞—Ä', '–≥–æ–ª–ª–∞–Ω–¥—Å—å–∫–∏–π —Å–æ—É—Å', '–±–µ—à–∞–º–µ–ª—å', '–±–æ–ª–æ–Ω—å—î–∑–µ', '–∫–∞—Ä–±–æ–Ω–∞—Ä–∞',

            // Polish
            'ketchup', 'musztarda', 'majonez', 'ostry sos', 'sos barbecue', 'dressing do sa≈Çatek',
            'ranch', 'caesar', 'sos w≈Çoski', 'balsamiczny', 'sos worcestershire', 'sos rybny', 'teriyaki',

            // Russian
            '–∫–µ—Ç—á—É–ø', '–≥–æ—Ä—á–∏—Ü–∞', '–º–∞–π–æ–Ω–µ–∑', '–æ—Å—Ç—Ä—ã–π —Å–æ—É—Å', '—Å–æ—É—Å –±–∞—Ä–±–µ–∫—é', '–∑–∞–ø—Ä–∞–≤–∫–∞ –¥–ª—è —Å–∞–ª–∞—Ç–∞',
            '—Ä–∞–Ω—á', '—Ü–µ–∑–∞—Ä—å', '–∏—Ç–∞–ª—å—è–Ω—Å–∫–∞—è –∑–∞–ø—Ä–∞–≤–∫–∞', '–±–∞–ª—å–∑–∞–º–∏–∫', '–≤—É—Å—Ç–µ—Ä—à–∏—Ä—Å–∫–∏–π —Å–æ—É—Å', '—Ä—ã–±–Ω—ã–π —Å–æ—É—Å', '—Ç–µ—Ä–∏—è–∫–∏'
        ]
    }
};

const UNIT_EQUIVALENTS = {
    // Volume
    'cup': { base: 'cup', factor: 1 },
    'cups': { base: 'cup', factor: 1 },
    'tablespoon': { base: 'tablespoon', factor: 1 },
    'tablespoons': { base: 'tablespoon', factor: 1 },
    'tbsp': { base: 'tablespoon', factor: 1 },
    'teaspoon': { base: 'teaspoon', factor: 1 },
    'teaspoons': { base: 'teaspoon', factor: 1 },
    'tsp': { base: 'teaspoon', factor: 1 },

    // Weight
    'pound': { base: 'pound', factor: 1 },
    'pounds': { base: 'pound', factor: 1 },
    'lb': { base: 'pound', factor: 1 },
    'lbs': { base: 'pound', factor: 1 },
    'ounce': { base: 'ounce', factor: 1 },
    'ounces': { base: 'ounce', factor: 1 },
    'oz': { base: 'ounce', factor: 1 },

    // Metric
    'gram': { base: 'gram', factor: 1 },
    'grams': { base: 'gram', factor: 1 },
    'g': { base: 'gram', factor: 1 },
    'kilogram': { base: 'kilogram', factor: 1 },
    'kilograms': { base: 'kilogram', factor: 1 },
    'kg': { base: 'kilogram', factor: 1 },
    'milliliter': { base: 'milliliter', factor: 1 },
    'milliliters': { base: 'milliliter', factor: 1 },
    'ml': { base: 'milliliter', factor: 1 },
    'liter': { base: 'liter', factor: 1 },
    'liters': { base: 'liter', factor: 1 },
    'l': { base: 'liter', factor: 1 }
};

const generateShoppingList = async (recipeIds, userId, listName = null) => {
    try {
        console.log(`üõí Generating shopping list for ${recipeIds.length} recipes for user ${userId}`);

        // Get recipes
        const recipes = await getRecipesByIds(recipeIds, userId);
        if (recipes.length === 0) {
            return {
                success: false,
                error: 'No accessible recipes found'
            };
        }

        console.log(`üìö Found ${recipes.length} recipes: ${recipes.map(r => r.title).join(', ')}`);

        const consolidatedIngredients = await consolidateIngredientsFromRecipes(recipes);
        const categorizedIngredients = categorizeIngredients(consolidatedIngredients);
        const userPreferences = await getUserShoppingPreferences(userId);
        const filteredIngredients = applyDietaryRestrictions(categorizedIngredients, userPreferences);
        const finalListName = listName || generateAutoListName(recipes);

        const savedList = await saveShoppingList(userId, {
            name: finalListName,
            recipeIds: recipeIds,
            categorizedIngredients: filteredIngredients,
            recipeCount: recipes.length,
            totalItems: Object.values(filteredIngredients).flat().length
        });


        const formattedList = formatShoppingListForDisplay(filteredIngredients, recipes, finalListName);

        console.log(`‚úÖ Shopping list generated: ${finalListName} (${Object.values(filteredIngredients).flat().length} items)`);

        return {
            success: true,
            shoppingList: savedList,
            formattedText: formattedList,
            categorizedIngredients: filteredIngredients,
            recipeCount: recipes.length,
            totalItems: Object.values(filteredIngredients).flat().length
        };

    } catch (error) {
        console.error('Shopping list generation error:', error);
        return {
            success: false,
            error: error.message || 'Failed to generate shopping list'
        };
    }
};

const getRecipesByIds = async (recipeIds, userId) => {
    try {
        const placeholders = recipeIds.map((_, index) => `$${index + 2}`).join(',');
        const result = await query(
            `SELECT id, title, structured_recipe, servings 
             FROM recipes 
             WHERE id IN (${placeholders}) AND user_id = $1
             ORDER BY created_at DESC`,
            [userId, ...recipeIds]
        );

        return result.rows;
    } catch (error) {
        console.error('Error getting recipes by IDs:', error);
        throw error;
    }
};

const extractIngredientsFromRecipe = (recipeText) => {
    const ingredients = [];
    const lines = recipeText.split('\n');
    let inIngredientsSection = false;

    for (const line of lines) {
        if (line.includes('**INGREDIENTS:**') || line.includes('üìã **INGREDIENTS:**')) {
            inIngredientsSection = true;
            continue;
        }

        if (inIngredientsSection && (
            line.includes('**COOKING STEPS:**') ||
            line.includes('üë©‚Äçüç≥ **COOKING STEPS:**') ||
            line.includes('**INSTRUCTIONS:**') ||
            line.includes('üìä **NUTRITION ANALYSIS**')
        )) {
            break;
        }

        if (inIngredientsSection && line.trim().startsWith('-')) {
            const ingredient = line.substring(1).trim();
            if (ingredient.length > 0) {
                ingredients.push(ingredient);
            }
        }
    }

    return ingredients;
};

const consolidateIngredientsFromRecipes = async (recipes) => {
    const allIngredients = [];
    for (const recipe of recipes) {
        const ingredients = extractIngredientsFromRecipe(recipe.structured_recipe);
        for (const ingredient of ingredients) {
            const parsed = parseIngredientForShopping(ingredient, recipe.title);
            if (parsed) {
                allIngredients.push(parsed);
            }
        }
    }
    const consolidated = consolidateSimilarIngredients(allIngredients);

    return consolidated;
};

const parseIngredientForShopping = (ingredientLine, recipeTitle) => {
    try {
        const cleaned = ingredientLine
            .replace(/\*\*/g, '')
            .replace(/^\s*-\s*/, '')
            .trim();

        const patterns = [
            /^([\d\/\.\s-]+(?:\s+\d+\/\d+)?)\s*([a-zA-Z–∞-—è—ë]+(?:\s+[a-zA-Z–∞-—è—ë]+)*)\s+(.+)$/,
            /^(.+?)\s*\(([^)]+)\)$/,
            /^([\d\/\.\s-]+(?:\s+\d+\/\d+)?)\s+(.+)$/
        ];

        let quantity = null;
        let unit = null;
        let ingredient = cleaned;

        for (const pattern of patterns) {
            const match = cleaned.match(pattern);
            if (match) {
                if (pattern.source.includes('(.+?)')) {
                    ingredient = match[1].trim();
                    const quantityPart = match[2].trim();
                    const qMatch = quantityPart.match(/([\d\/\.\s-]+)\s*([a-zA-Z–∞-—è—ë]*)/);
                    if (qMatch) {
                        quantity = parseQuantity(qMatch[1]);
                        unit = qMatch[2] || null;
                    }
                } else if (match.length === 4) {
                    quantity = parseQuantity(match[1]);
                    unit = match[2].trim();
                    ingredient = match[3].trim();
                } else if (match.length === 3) {
                    quantity = parseQuantity(match[1]);
                    ingredient = match[2].trim();
                }
                break;
            }
        }

        ingredient = extractCoreIngredient(ingredient);

        return {
            original: ingredientLine,
            quantity: quantity,
            unit: unit ? unit.toLowerCase() : null,
            ingredient: ingredient,
            recipeTitle: recipeTitle,
            combinedText: cleaned
        };

    } catch (error) {
        console.log(`Failed to parse ingredient: ${ingredientLine}`, error.message);
        return {
            original: ingredientLine,
            quantity: null,
            unit: null,
            ingredient: ingredientLine.replace(/\*\*/g, '').replace(/^\s*-\s*/, '').trim(),
            recipeTitle: recipeTitle,
            combinedText: ingredientLine.replace(/\*\*/g, '').replace(/^\s*-\s*/, '').trim()
        };
    }
};

const extractCoreIngredient = (ingredient) => {
    let core = ingredient
        .replace(/\(.*?\)/g, '') // parentheses
        .replace(/,.*$/, '') // after first comma
        .replace(/\bor\b.*$/i, '') // or alternatives
        .replace(/\bof choice\b/i, '') // of choice
        .replace(/\bany\b/i, '') // any
        .replace(/\bfresh\b/i, '') // "fresh"
        .replace(/\bdried\b/i, '') // "dried"
        .replace(/\bground\b/i, '') // "ground"
        .replace(/\bwhole\b/i, '') // "whole"
        .replace(/\bfinely chopped\b/i, '') // preparation methods
        .replace(/\bchopped\b/i, '')
        .replace(/\bsliced\b/i, '')
        .replace(/\bdiced\b/i, '')
        .replace(/\bminced\b/i, '')
        .trim();

    if (core.includes('oil')) {
        return 'oil';
    }
    if (core.includes('sauce')) {
        return core;
    }
    if (core.includes('milk') || core.includes('–º–æ–ª–æ–∫')) {
        return 'milk';
    }
    if (core.includes('tea') || core.includes('—á–∞–π')) {
        return 'tea';
    }

    return core;
};

const consolidateSimilarIngredients = (ingredients) => {
    const consolidated = {};

    for (const ingredient of ingredients) {
        const key = normalizeIngredientForGrouping(ingredient.ingredient);

        if (!consolidated[key]) {
            consolidated[key] = {
                ingredient: ingredient.ingredient,
                items: [],
                totalQuantity: 0,
                commonUnit: null,
                canConsolidate: false
            };
        }

        consolidated[key].items.push(ingredient);

        if (ingredient.quantity && ingredient.unit) {
            const normalizedUnit = normalizeUnit(ingredient.unit);

            if (!consolidated[key].commonUnit) {
                consolidated[key].commonUnit = normalizedUnit;
                consolidated[key].totalQuantity = ingredient.quantity;
                consolidated[key].canConsolidate = true;
            } else if (consolidated[key].commonUnit === normalizedUnit) {
                consolidated[key].totalQuantity += ingredient.quantity;
            } else if (areUnitsCompatible(consolidated[key].commonUnit, normalizedUnit)) {
                const convertedQuantity = convertToBaseUnit(ingredient.quantity, normalizedUnit);
                const baseQuantity = convertToBaseUnit(consolidated[key].totalQuantity, consolidated[key].commonUnit);
                consolidated[key].totalQuantity = baseQuantity + convertedQuantity;
                consolidated[key].commonUnit = 'tbsp';
            } else {
                consolidated[key].canConsolidate = false;
            }
        }
    }

    const result = [];
    for (const [key, data] of Object.entries(consolidated)) {
        if (data.canConsolidate && data.totalQuantity > 0 && data.items.length > 1) {
            // Successfully consolidated multiple items
            result.push({
                ingredient: data.ingredient,
                quantity: formatQuantityForShopping(data.totalQuantity),
                unit: data.commonUnit,
                recipes: [...new Set(data.items.map(item => item.recipeTitle))],
                combinedText: `${formatQuantityForShopping(data.totalQuantity)} ${data.commonUnit || ''} ${data.ingredient}`.trim(),
                isConsolidated: true
            });
        } else {
            for (const item of data.items) {
                result.push({
                    ingredient: item.ingredient,
                    quantity: item.quantity ? formatQuantityForShopping(item.quantity) : null,
                    unit: item.unit,
                    recipes: [item.recipeTitle],
                    combinedText: item.combinedText,
                    isConsolidated: false
                });
            }
        }
    }

    return result;
};

const normalizeIngredientForGrouping = (ingredient) => {
    return ingredient.toLowerCase()
        .replace(/s$/, '')
        .replace(/\s+/g, ' ')
        .replace(/[,()]/g, '')
        .trim();
};

const areUnitsCompatible = (unit1, unit2) => {
    const volumeUnits = ['tsp', 'teaspoon', 'tbsp', 'tablespoon', 'cup', 'ml', 'l'];
    const weightUnits = ['g', 'kg', 'oz', 'lb'];

    return (volumeUnits.includes(unit1) && volumeUnits.includes(unit2)) ||
        (weightUnits.includes(unit1) && weightUnits.includes(unit2));
};

const convertToBaseUnit = (quantity, unit) => {
    const conversions = {
        'tsp': 1/3,
        'teaspoon': 1/3,
        'tbsp': 1,
        'tablespoon': 1,
        'cup': 16,
        'ml': 1/15,
        'l': 67
    };
    return quantity * (conversions[unit] || 1);
};

const categorizeIngredients = (ingredients) => {
    const categorized = {};

    for (const [key, category] of Object.entries(INGREDIENT_CATEGORIES)) {
        categorized[key] = [];
    }
    categorized['other'] = [];

    for (const ingredient of ingredients) {
        let assigned = false;
        const ingredientLower = ingredient.ingredient.toLowerCase();

        for (const [categoryKey, category] of Object.entries(INGREDIENT_CATEGORIES)) {
            const matched = category.keywords.some(keyword => {
                const keywordLower = keyword.toLowerCase();
                return ingredientLower.includes(keywordLower) ||
                    keywordLower.includes(ingredientLower) ||
                    (ingredientLower.length > 3 && keywordLower.includes(ingredientLower)) ||
                    (keywordLower.length > 3 && ingredientLower.includes(keywordLower));
            });

            if (matched) {
                categorized[categoryKey].push(ingredient);
                assigned = true;
                break;
            }
        }

        if (!assigned) {
            categorized['other'].push(ingredient);
        }
    }

    const result = {};
    for (const [key, items] of Object.entries(categorized)) {
        if (items.length > 0) {
            result[key] = items;
        }
    }

    return result;
};

const formatShoppingListForDisplay = (categorizedIngredients, recipes, listName) => {
    let formatted = `üõí **${listName}** üõí\n\n`;

    formatted += `üìö **From ${recipes.length} Recipe${recipes.length > 1 ? 's' : ''}:**\n`;
    recipes.forEach((recipe, index) => {
        formatted += `${index + 1}. ${recipe.title}\n`;
    });
    formatted += '\n';

    const totalItems = Object.values(categorizedIngredients).flat().length;
    formatted += `üìù **Shopping List** (${totalItems} items):\n\n`;
    const categoryOrder = ['produce', 'meat', 'dairy', 'pantry', 'frozen', 'bakery', 'beverages', 'condiments', 'other'];

    for (const categoryKey of categoryOrder) {
        if (categorizedIngredients[categoryKey]) {
            const ingredients = categorizedIngredients[categoryKey];
            const categoryName = INGREDIENT_CATEGORIES[categoryKey]?.name || 'üì¶ Other';
            formatted += `${categoryName}:\n`;

            ingredients.forEach(ingredient => {
                const checkBox = '‚òê';
                let itemText = `${checkBox} ${ingredient.combinedText}`;

                if (ingredient.isConsolidated && ingredient.recipes.length > 1) {
                    itemText += ` *(consolidated from ${ingredient.recipes.length} recipes)*`;
                }

                formatted += `  ${itemText}\n`;
            });

            formatted += '\n';
        }
    }

    formatted += `üí° **Shopping Tips:**\n`;
    formatted += `‚Ä¢ Check off items as you shop\n`;
    formatted += `‚Ä¢ Items are organized by store sections\n`;
    formatted += `‚Ä¢ Consolidated items save time and money\n\n`;

    formatted += `üåø *Happy shopping and cooking!* ‚ú®`;

    return formatted;
};

const parseQuantity = (quantityStr) => {
    if (!quantityStr) return null;
    const cleaned = quantityStr.toString().trim();

    const rangeMatch = cleaned.match(/^(\d*\.?\d+)\s*[-‚Äì‚Äî]\s*(\d*\.?\d+)/);
    if (rangeMatch) {
        return Math.max(parseFloat(rangeMatch[1]), parseFloat(rangeMatch[2]));
    }

    const fractionMatch = cleaned.match(/^(\d+)?\s*(\d+)\/(\d+)$/);
    if (fractionMatch) {
        const whole = fractionMatch[1] ? parseInt(fractionMatch[1]) : 0;
        const numerator = parseInt(fractionMatch[2]);
        const denominator = parseInt(fractionMatch[3]);
        return whole + (numerator / denominator);
    }

    const europeanDecimal = cleaned.replace(',', '.');
    const decimalMatch = europeanDecimal.match(/^(\d*\.?\d+)/);
    if (decimalMatch) {
        return parseFloat(decimalMatch[1]);
    }
    const wordNumbers = {
        // Ukrainian
        '–æ–¥–∏–Ω': 1, '–æ–¥–Ω–∞': 1, '–æ–¥–Ω–µ': 1,
        '–¥–≤–∞': 2, '–¥–≤—ñ': 2, '–¥–≤–æ—î': 2,
        '—Ç—Ä–∏': 3, '—á–æ—Ç–∏—Ä–∏': 4, '–ø\'—è—Ç—å': 5, '—à—ñ—Å—Ç—å': 6,
        '—Å—ñ–º': 7, '–≤—ñ—Å—ñ–º': 8, '–¥–µ–≤\'—è—Ç—å': 9, '–¥–µ—Å—è—Ç—å': 10,
        '–ø—ñ–≤': 0.5, '–ø–æ–ª–æ–≤–∏–Ω–∞': 0.5, '—á–≤–µ—Ä—Ç—å': 0.25,

        // Russian
        '–ø–æ–ª–æ–≤–∏–Ω—É': 0.5, '—á–µ—Ç–≤–µ—Ä—Ç—å': 0.25,
        '–æ–¥–Ω—É': 1, '–¥–≤–µ': 2, '–ø—è—Ç—å': 5, '—à–µ—Å—Ç—å': 6,
        '—Å–µ–º—å': 7, '–≤–æ—Å–µ–º—å': 8, '–¥–µ–≤—è—Ç—å': 9, '–¥–µ—Å—è—Ç—å': 10,

        // Polish
        'jeden': 1, 'jedna': 1, 'jedno': 1,
        'dwa': 2, 'dwie': 2, 'trzy': 3, 'cztery': 4,
        'piƒôƒá': 5, 'sze≈õƒá': 6, 'siedem': 7, 'osiem': 8,
        'dziewiƒôƒá': 9, 'dziesiƒôƒá': 10,
        'p√≥≈Ç': 0.5, 'ƒáwierƒá': 0.25,

        // English
        'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5,
        'six': 6, 'seven': 7, 'eight': 8, 'nine': 9, 'ten': 10,
        'half': 0.5, 'quarter': 0.25
    };

    const lowerCleaned = cleaned.toLowerCase();
    if (wordNumbers[lowerCleaned]) {
        return wordNumbers[lowerCleaned];
    }

    const anyNumberMatch = cleaned.match(/(\d*\.?\d+)/);
    if (anyNumberMatch) {
        return parseFloat(anyNumberMatch[1]);
    }

    return null;
};

const normalizeIngredientName = (ingredient) => {
    return ingredient.toLowerCase()
        .replace(/\s+/g, ' ')
        .replace(/[,()]/g, '')
        .trim();
};

const normalizeUnit = (unit) => {
    if (!unit) return null;

    const lowerUnit = unit.toLowerCase().trim();

    // Enhanced unit mappings with multilingual support
    const unitMappings = {
        // Volume - English
        'tsp': 'tsp', 'teaspoon': 'tsp', 'teaspoons': 'tsp',
        'tbsp': 'tbsp', 'tablespoon': 'tbsp', 'tablespoons': 'tbsp',
        'cup': 'cup', 'cups': 'cup', 'c': 'cup',
        'ml': 'ml', 'milliliter': 'ml', 'milliliters': 'ml',
        'l': 'l', 'liter': 'l', 'liters': 'l', 'litre': 'l', 'litres': 'l',

        // Volume - Ukrainian
        '—á.–ª.': 'tsp', '—á. –ª.': 'tsp', '—á–∞–π–Ω–∞ –ª–æ–∂–∫–∞': 'tsp', '—á–∞–π–Ω—ñ –ª–æ–∂–∫–∏': 'tsp',
        '—Å—Ç.–ª.': 'tbsp', '—Å—Ç. –ª.': 'tbsp', '—Å—Ç–æ–ª–æ–≤–∞ –ª–æ–∂–∫–∞': 'tbsp', '—Å—Ç–æ–ª–æ–≤—ñ –ª–æ–∂–∫–∏': 'tbsp',
        '—Å–∫–ª—è–Ω–∫–∞': 'cup', '—Å–∫–ª—è–Ω–∫–∏': 'cup', '—Å—Ç–∞–∫–∞–Ω': 'cup', '—Å—Ç–∞–∫–∞–Ω–∏': 'cup',
        '–º–ª': 'ml', '–º—ñ–ª—ñ–ª—ñ—Ç': 'ml', '–º—ñ–ª—ñ–ª—ñ—Ç.': 'ml', '–º—ñ–ª—ñ–ª—ñ—Ç—Ä': 'ml', '–º—ñ–ª—ñ–ª—ñ—Ç—Ä–∏': 'ml',
        '–ª.': 'l', '–ª—ñ—Ç—Ä': 'l', '–ª—ñ—Ç—Ä–∏': 'l',

        // Volume - Polish
        '≈Çy≈ºeczka': 'tsp', '≈Çy≈ºeczki': 'tsp', '≈Çy≈º.': 'tsp',
        '≈Çy≈ºka': 'tbsp', '≈Çy≈ºki': 'tbsp', '≈Çy≈º. stol.': 'tbsp',
        'szklanka': 'cup', 'szklanki': 'cup',

        // Volume - Russian
        '—á.–ª': 'tsp', '—á–∞–π–Ω–∞—è –ª–æ–∂–∫–∞': 'tsp', '—á–∞–π–Ω—ã–µ –ª–æ–∂–∫–∏': 'tsp',
        '—Å—Ç.–ª': 'tbsp', '—Å—Ç–æ–ª–æ–≤–∞—è –ª–æ–∂–∫–∞': 'tbsp', '—Å—Ç–æ–ª–æ–≤—ã–µ –ª–æ–∂–∫–∏': 'tbsp',
        '—Å—Ç–∞–∫–∞–Ω': 'cup', '—Å—Ç–∞–∫–∞–Ω—ã': 'cup',
        '–º–ª.': 'ml', '–º–∏–ª–ª–∏–ª–∏—Ç—Ä': 'ml', '–º–∏–ª–ª–∏–ª–∏—Ç—Ä—ã': 'ml',
        '–ª': 'l', '–ª–∏—Ç—Ä': 'l', '–ª–∏—Ç—Ä—ã': 'l',

        // Weight - English
        'g': 'g', 'gram': 'g', 'grams': 'g', 'gr': 'g',
        'kg': 'kg', 'kilogram': 'kg', 'kilograms': 'kg',
        'oz': 'oz', 'ounce': 'oz', 'ounces': 'oz',
        'lb': 'lb', 'pound': 'lb', 'pounds': 'lb', 'lbs': 'lb',

        // Weight - Ukrainian
        '–≥': 'g', '–≥.': 'g', '–≥—Ä–∞–º': 'g', '–≥—Ä–∞–º–∏': 'g', '–≥—Ä–∞–º—ñ–≤': 'g',
        '–∫–≥': 'kg', '–∫–≥.': 'kg', '–∫—ñ–ª–æ–≥—Ä–∞–º': 'kg', '–∫—ñ–ª–æ–≥—Ä–∞–º–∏': 'kg', '–∫—ñ–ª–æ–≥—Ä–∞–º—ñ–≤': 'kg',
        '—É–Ω—Ü—ñ—è': 'oz', '—É–Ω—Ü—ñ—ó': 'oz',
        '—Ñ—É–Ω—Ç': 'lb', '—Ñ—É–Ω—Ç–∏': 'lb', '—Ñ—É–Ω—Ç—ñ–≤': 'lb',

        // Weight - Polish
        'gram': 'g', 'gramy': 'g', 'gram√≥w': 'g',
        'kilogram': 'kg', 'kilogramy': 'kg', 'kilogram√≥w': 'kg',

        // Weight - Russian
        '–≥—Ä': 'g', '–≥—Ä.': 'g', '–≥—Ä–∞–º–º': 'g', '–≥—Ä–∞–º–º—ã': 'g', '–≥—Ä–∞–º–º–æ–≤': 'g',
        '–∫–∏–ª–æ–≥—Ä–∞–º–º': 'kg', '–∫–∏–ª–æ–≥—Ä–∞–º–º—ã': 'kg', '–∫–∏–ª–æ–≥—Ä–∞–º–º–æ–≤': 'kg',
        '—É–Ω—Ü–∏—è': 'oz', '—É–Ω—Ü–∏–∏': 'oz',
        '—Ñ—É–Ω—Ç': 'lb', '—Ñ—É–Ω—Ç—ã': 'lb', '—Ñ—É–Ω—Ç–æ–≤': 'lb',

        // Count/Pieces - Multilingual
        'piece': 'piece', 'pieces': 'piece', 'pc': 'piece', 'pcs': 'piece',
        '—à—Ç—É–∫–∞': 'piece', '—à—Ç—É–∫–∏': 'piece', '—à—Ç—É–∫': 'piece', '—à—Ç': 'piece', '—à—Ç.': 'piece',
        'sztuka': 'piece', 'sztuki': 'piece', 'sztuk': 'piece',
        '–∫—É—Å–æ–∫': 'piece', '–∫—É—Å–∫–∏': 'piece', '–∫—É—Å–∫–æ–≤': 'piece',

        // Special cooking units
        'clove': 'clove', 'cloves': 'clove', '–∑—É–±—á–∏–∫': 'clove', '–∑—É–±—á–∏–∫–∏': 'clove', '–∑—É–±—á–∏–∫—ñ–≤': 'clove',
        'stick': 'stick', 'sticks': 'stick', '–ø–∞–ª–∏—á–∫–∞': 'stick', '–ø–∞–ª–∏—á–∫–∏': 'stick',
        'leaf': 'leaf', 'leaves': 'leaf', '–ª–∏—Å—Ç': 'leaf', '–ª–∏—Å—Ç–∏': 'leaf', '–ª–∏—Å—Ç—è': 'leaf',
        'pinch': 'pinch', '–¥—Ä—ñ–±–∫–∞': 'pinch', '—â—ñ–ø–∫–∞': 'pinch'
    };

    return unitMappings[lowerUnit] || lowerUnit;
};

const formatQuantityForShopping = (quantity) => {
    if (!quantity || quantity === 0) return '';
    const rounded = Math.round(quantity * 8) / 8; // Round to nearest 1/8
    const fractions = {
        0.125: '‚Öõ',
        0.25: '¬º',
        0.375: '‚Öú',
        0.5: '¬Ω',
        0.625: '‚Öù',
        0.75: '¬æ',
        0.875: '‚Öû'
    };
    const tolerance = 0.01;
    for (const [decimal, fraction] of Object.entries(fractions)) {
        if (Math.abs(rounded - decimal) < tolerance) {
            return fraction;
        }
    }

    if (rounded >= 1) {
        const whole = Math.floor(rounded);
        const fractional = rounded - whole;

        for (const [decimal, fraction] of Object.entries(fractions)) {
            if (Math.abs(fractional - decimal) < tolerance) {
                return whole + fraction;
            }
        }

        if (fractional < 0.1) {
            return whole.toString();
        } else {
            return rounded.toFixed(1).replace(/\.0$/, '');
        }
    }

    return rounded.toFixed(2).replace(/\.?0+$/, '');
};

const getUserShoppingPreferences = async (userId) => {
    try {
        const result = await query(
            'SELECT * FROM user_shopping_preferences WHERE user_id = $1',
            [userId]
        );

        if (result.rows.length > 0) {
            return result.rows[0];
        }

        return {
            dietary_restrictions: [],
            exclude_ingredients: [],
            preferred_brands: [],
            store_layout: 'default'
        };
    } catch (error) {
        console.log('Error getting user shopping preferences:', error.message);
        return {
            dietary_restrictions: [],
            exclude_ingredients: [],
            preferred_brands: [],
            store_layout: 'default'
        };
    }
};

const applyDietaryRestrictions = (categorizedIngredients, preferences) => {
    if (!preferences.dietary_restrictions && !preferences.exclude_ingredients) {
        return categorizedIngredients;
    }

    const restrictions = preferences.dietary_restrictions || [];
    const excludedIngredients = preferences.exclude_ingredients || [];
    const dietaryFilters = {
        vegetarian: {
            exclude: ['chicken', 'beef', 'pork', 'fish', 'salmon', 'tuna', 'shrimp', 'turkey', 'lamb',
                'bacon', 'sausage', 'ham', 'duck', 'goose', 'venison', 'rabbit', 'meat',
                // Ukrainian
                '–∫—É—Ä–∫–∞', '—è–ª–æ–≤–∏—á–∏–Ω–∞', '—Å–≤–∏–Ω–∏–Ω–∞', '—Ä–∏–±–∞', '–ª–æ—Å–æ—Å—å', '–∫—Ä–µ–≤–µ—Ç–∫–∏', '—ñ–Ω–¥–∏—á–∫–∞', '–±–∞—Ä–∞–Ω–∏–Ω–∞',
                '–±–µ–∫–æ–Ω', '–∫–æ–≤–±–∞—Å–∞', '—à–∏–Ω–∫–∞', '–º\'—è—Å–æ', '–∫—É—Ä—è—Ç–∏–Ω–∞', '—Ç–µ–ª—è—Ç–∏–Ω–∞', '–ø–µ—á—ñ–Ω–∫–∞',
                // Polish
                'kurczak', 'wo≈Çowina', 'wieprzowina', 'ryba', '≈Çoso≈õ', 'krewetki', 'indyk', 'baranina',
                // Russian
                '–∫—É—Ä–∏—Ü–∞', '–≥–æ–≤—è–¥–∏–Ω–∞', '—Å–≤–∏–Ω–∏–Ω–∞', '—Ä—ã–±–∞', '–ª–æ—Å–æ—Å—å', '–∫—Ä–µ–≤–µ—Ç–∫–∏', '–∏–Ω–¥–µ–π–∫–∞', '–±–∞—Ä–∞–Ω–∏–Ω–∞']
        },
        vegan: {
            exclude: ['milk', 'cheese', 'butter', 'cream', 'yogurt', 'eggs', 'honey', 'chicken', 'beef',
                'pork', 'fish', 'salmon', 'meat', 'bacon', 'sausage', 'ham',
                // Ukrainian
                '–º–æ–ª–æ–∫–æ', '—Å–∏—Ä', '–º–∞—Å–ª–æ', '–≤–µ—Ä—à–∫–∏', '–π–æ–≥—É—Ä—Ç', '—è–π—Ü—è', '–º–µ–¥', '–∫—É—Ä–∫–∞', '–º\'—è—Å–æ',
                '—Å–º–µ—Ç–∞–Ω–∞', '—Ç–≤–æ—Ä–æ–≥', '–±—Ä–∏–Ω–∑–∞', '–º–∞—Å–∫–∞—Ä–ø–æ–Ω–µ', '—è–ª–æ–≤–∏—á–∏–Ω–∞', '—Å–≤–∏–Ω–∏–Ω–∞', '–∫–æ–≤–±–∞—Å–∞',
                // Polish
                'mleko', 'ser', 'mas≈Ço', '≈õmietana', 'jogurt', 'jajka', 'mi√≥d', 'kurczak', 'miƒôso',
                // Russian
                '–º–æ–ª–æ–∫–æ', '—Å—ã—Ä', '–º–∞—Å–ª–æ', '—Å–ª–∏–≤–∫–∏', '–π–æ–≥—É—Ä—Ç', '—è–π—Ü–∞', '–º—ë–¥', '–∫—É—Ä–∏—Ü–∞', '–º—è—Å–æ']
        },
        gluten_free: {
            exclude: ['flour', 'bread', 'pasta', 'wheat', 'barley', 'rye', 'oats', 'beer', 'soy sauce',
                'bagels', 'rolls', 'tortillas', 'crackers', 'cookies', 'cake', 'muffins',
                // Ukrainian
                '–±–æ—Ä–æ—à–Ω–æ', '—Ö–ª—ñ–±', '–º–∞–∫–∞—Ä–æ–Ω–∏', '–ø—à–µ–Ω–∏—Ü—è', '—è—á–º—ñ–Ω—å', '–∂–∏—Ç–æ', '–≤—ñ–≤—Å—è–Ω–∫–∞', '–ø–∏–≤–æ',
                '—Å–æ—î–≤–∏–π —Å–æ—É—Å', '–±—É–ª–æ—á–∫–∏', '–ø–µ—á–∏–≤–æ', '—Ç–æ—Ä—Ç', '–∫–µ–∫—Å', '–±–∞—Ç–æ–Ω', '–ª–∞–≤–∞—à',
                // Polish
                'mƒÖka', 'chleb', 'makaron', 'pszenica', 'jƒôczmie≈Ñ', '≈ºyto', 'owies', 'piwo',
                // Russian
                '–º—É–∫–∞', '—Ö–ª–µ–±', '–º–∞–∫–∞—Ä–æ–Ω—ã', '–ø—à–µ–Ω–∏—Ü–∞', '—è—á–º–µ–Ω—å', '—Ä–æ–∂—å', '–æ–≤—ë—Å', '–ø–∏–≤–æ']
        },
        dairy_free: {
            exclude: ['milk', 'cheese', 'butter', 'cream', 'yogurt', 'sour cream', 'cream cheese',
                'mozzarella', 'cheddar', 'parmesan', 'cottage cheese', 'ricotta', 'feta',
                // Ukrainian
                '–º–æ–ª–æ–∫–æ', '—Å–∏—Ä', '–º–∞—Å–ª–æ', '–≤–µ—Ä—à–∫–∏', '–π–æ–≥—É—Ä—Ç', '—Å–º–µ—Ç–∞–Ω–∞', '–≤–µ—Ä—à–∫–æ–≤–∏–π —Å–∏—Ä',
                '–º–æ—Ü–∞—Ä–µ–ª–∞', '—á–µ–¥–¥–µ—Ä', '–ø–∞—Ä–º–µ–∑–∞–Ω', '—Ç–≤–æ—Ä–æ–≥', '—Ä—ñ–∫–æ—Ç–∞', '—Ñ–µ—Ç–∞', '–±—Ä–∏–Ω–∑–∞',
                // Polish
                'mleko', 'ser', 'mas≈Ço', '≈õmietana', 'jogurt', 'kwa≈õna ≈õmietana', 'serek ≈õmietankowy',
                // Russian
                '–º–æ–ª–æ–∫–æ', '—Å—ã—Ä', '–º–∞—Å–ª–æ', '—Å–ª–∏–≤–∫–∏', '–π–æ–≥—É—Ä—Ç', '—Å–º–µ—Ç–∞–Ω–∞', '—Ç–≤–æ—Ä–æ–≥']
        },
        keto: {
            exclude: ['rice', 'pasta', 'bread', 'potato', 'sugar', 'flour', 'oats', 'quinoa',
                'beans', 'lentils', 'corn', 'banana', 'apple', 'honey', 'maple syrup',
                // Ukrainian
                '—Ä–∏—Å', '–º–∞–∫–∞—Ä–æ–Ω–∏', '—Ö–ª—ñ–±', '–∫–∞—Ä—Ç–æ–ø–ª—è', '—Ü—É–∫–æ—Ä', '–±–æ—Ä–æ—à–Ω–æ', '–≤—ñ–≤—Å—è–Ω–∫–∞', '–∫—ñ–Ω–æ–∞',
                '–∫–≤–∞—Å–æ–ª—è', '—Å–æ—á–µ–≤–∏—Ü—è', '–∫—É–∫—É—Ä—É–¥–∑–∞', '–±–∞–Ω–∞–Ω', '—è–±–ª—É–∫–æ', '–º–µ–¥',
                // Polish
                'ry≈º', 'makaron', 'chleb', 'ziemniak', 'cukier', 'mƒÖka', 'p≈Çatki owsiane',
                // Russian
                '—Ä–∏—Å', '–º–∞–∫–∞—Ä–æ–Ω—ã', '—Ö–ª–µ–±', '–∫–∞—Ä—Ç–æ—Ñ–µ–ª—å', '—Å–∞—Ö–∞—Ä', '–º—É–∫–∞', '–æ–≤—Å—è–Ω–∫–∞', '–∫–∏–Ω–æ–∞']
        },
        paleo: {
            exclude: ['beans', 'lentils', 'rice', 'oats', 'quinoa', 'bread', 'pasta', 'milk', 'cheese',
                'sugar', 'processed', 'peanuts', 'soy sauce', 'beer', 'corn',
                // Ukrainian
                '–∫–≤–∞—Å–æ–ª—è', '—Å–æ—á–µ–≤–∏—Ü—è', '—Ä–∏—Å', '–≤—ñ–≤—Å—è–Ω–∫–∞', '–∫—ñ–Ω–æ–∞', '—Ö–ª—ñ–±', '–º–∞–∫–∞—Ä–æ–Ω–∏', '–º–æ–ª–æ–∫–æ',
                '—Å–∏—Ä', '—Ü—É–∫–æ—Ä', '–∞—Ä–∞—Ö—ñ—Å', '—Å–æ—î–≤–∏–π —Å–æ—É—Å', '–ø–∏–≤–æ', '–∫—É–∫—É—Ä—É–¥–∑–∞',
                // Polish
                'fasola', 'soczewica', 'ry≈º', 'p≈Çatki owsiane', 'quinoa', 'chleb', 'makaron',
                // Russian
                '—Ñ–∞—Å–æ–ª—å', '—á–µ—á–µ–≤–∏—Ü–∞', '—Ä–∏—Å', '–æ–≤—Å—è–Ω–∫–∞', '–∫–∏–Ω–æ–∞', '—Ö–ª–µ–±', '–º–∞–∫–∞—Ä–æ–Ω—ã']
        },
        nut_free: {
            exclude: ['nuts', 'almonds', 'walnuts', 'peanuts', 'cashews', 'pistachios', 'hazelnuts',
                'pecans', 'brazil nuts', 'pine nuts', 'nut oil', 'almond oil',
                // Ukrainian
                '–≥–æ—Ä—ñ—Ö–∏', '–º–∏–≥–¥–∞–ª—å', '–≤–æ–ª–æ—Å—å–∫—ñ –≥–æ—Ä—ñ—Ö–∏', '–∞—Ä–∞—Ö—ñ—Å', '–∫–µ—à\'—é', '—Ñ—ñ—Å—Ç–∞—à–∫–∏', '–ª—ñ—â–∏–Ω–∞',
                '–ø–µ–∫–∞–Ω', '–±—Ä–∞–∑–∏–ª—å—Å—å–∫–∏–π –≥–æ—Ä—ñ—Ö', '–∫–µ–¥—Ä–æ–≤—ñ –≥–æ—Ä—ñ—à–∫–∏', '–≥–æ—Ä—ñ—Ö–æ–≤–µ –º–∞—Å–ª–æ',
                // Polish
                'orzechy', 'migda≈Çy', 'orzechy w≈Çoskie', 'orzeszki ziemne', 'nerkowce', 'pistacje',
                // Russian
                '–æ—Ä–µ—Ö–∏', '–º–∏–Ω–¥–∞–ª—å', '–≥—Ä–µ—Ü–∫–∏–µ –æ—Ä–µ—Ö–∏', '–∞—Ä–∞—Ö–∏—Å', '–∫–µ—à—å—é', '—Ñ–∏—Å—Ç–∞—à–∫–∏', '—Ñ—É–Ω–¥—É–∫']
        },
        shellfish_free: {
            exclude: ['shrimp', 'crab', 'lobster', 'crayfish', 'prawns', 'scallops', 'mussels', 'oysters',
                'clams', 'squid', 'octopus', 'sea urchin',
                // Ukrainian
                '–∫—Ä–µ–≤–µ—Ç–∫–∏', '–∫—Ä–∞–±', '–æ–º–∞—Ä', '—Ä–∞–∫', '–≥—Ä–µ–±—ñ–Ω—Ü—ñ', '–º—ñ–¥—ñ—ó', '—É—Å—Ç—Ä–∏—Ü—ñ', '–º–æ–ª—é—Å–∫–∏',
                '–∫–∞–ª—å–º–∞—Ä', '–æ—Å—å–º–∏–Ω–æ–≥', '–º–æ—Ä—Å—å–∫–∏–π —ó–∂–∞–∫',
                // Polish
                'krewetki', 'krab', 'homar', 'rak', 'przegrzebki', 'ma≈Ç≈ºe', 'ostrygi',
                // Russian
                '–∫—Ä–µ–≤–µ—Ç–∫–∏', '–∫—Ä–∞–±', '–æ–º–∞—Ä', '—Ä–∞–∫', '–≥—Ä–µ–±–µ—à–∫–∏', '–º–∏–¥–∏–∏', '—É—Å—Ç—Ä–∏—Ü—ã', '–º–æ–ª–ª—é—Å–∫–∏']
        }
    };

    const filtered = {};

    for (const [category, ingredients] of Object.entries(categorizedIngredients)) {
        filtered[category] = ingredients.filter(ingredient => {
            const ingredientLower = ingredient.ingredient.toLowerCase();

            if (excludedIngredients.some(excluded =>
                ingredientLower.includes(excluded.toLowerCase()) ||
                excluded.toLowerCase().includes(ingredientLower)
            )) {
                console.log(`üö´ Filtered out "${ingredient.ingredient}" - in exclusion list`);
                return false;
            }

            for (const restriction of restrictions) {
                if (dietaryFilters[restriction]) {
                    const excludedItems = dietaryFilters[restriction].exclude;
                    if (excludedItems.some(excluded =>
                        ingredientLower.includes(excluded.toLowerCase()) ||
                        excluded.toLowerCase().includes(ingredientLower)
                    )) {
                        console.log(`üö´ Filtered out "${ingredient.ingredient}" - violates ${restriction}`);
                        return false;
                    }
                }
            }

            return true;
        });

        if (filtered[category].length === 0) {
            delete filtered[category];
        }
    }
    const originalCount = Object.values(categorizedIngredients).flat().length;
    const filteredCount = Object.values(filtered).flat().length;
    if (originalCount > filteredCount) {
        console.log(`üè∑Ô∏è Dietary filtering: ${originalCount} ‚Üí ${filteredCount} ingredients (${originalCount - filteredCount} filtered out)`);
    }

    return filtered;
};

const generateAutoListName = (recipes) => {
    const now = new Date();
    const date = now.toLocaleDateString();

    if (recipes.length === 1) {
        return `${recipes[0].title} - ${date}`;
    } else if (recipes.length <= 3) {
        const titles = recipes.map(r => r.title).join(', ');
        return `${titles} - ${date}`;
    } else {
        return `${recipes.length} Recipes Shopping List - ${date}`;
    }
};

const saveShoppingList = async (userId, shoppingListData) => {
    try {
        const result = await query(
            `INSERT INTO shopping_lists (
                user_id, name, recipe_ids, categorized_ingredients, 
                recipe_count, total_items
            ) VALUES ($1, $2, $3, $4, $5, $6) 
            RETURNING *`,
            [
                userId,
                shoppingListData.name,
                JSON.stringify(shoppingListData.recipeIds),
                JSON.stringify(shoppingListData.categorizedIngredients),
                shoppingListData.recipeCount,
                shoppingListData.totalItems
            ]
        );

        console.log(`üíæ Shopping list saved: "${shoppingListData.name}" (ID: ${result.rows[0].id})`);
        return result.rows[0];
    } catch (error) {
        console.error('Error saving shopping list:', error);
        throw error;
    }
};

const getUserShoppingLists = async (userId, limit = 10) => {
    try {
        const result = await query(
            `SELECT * FROM shopping_lists 
             WHERE user_id = $1 
             ORDER BY created_at DESC 
             LIMIT $2`,
            [userId, limit]
        );

        return result.rows;
    } catch (error) {
        console.error('Error getting user shopping lists:', error);
        throw error;
    }
};

module.exports = {
    generateShoppingList,
    getUserShoppingLists,
    INGREDIENT_CATEGORIES
};