const path = require('path');
const fs = require('fs');

class LocalizationService {
    constructor() {
        this.messages = new Map();
        this.supportedLanguages = ['en', 'pl', 'uk', 'de', 'fr', 'es', 'it', 'ru'];
        this.defaultLanguage = 'en';
        this.isInitialized = false;
    }

    initialize() {
        try {
            console.log('üåç Initializing Localization Service...');

            this.supportedLanguages.forEach(lang => {
                try {
                    this.loadLanguage(lang);
                } catch (error) {
                    console.warn(`‚ö†Ô∏è Could not load ${lang} locale, using fallback`);
                    this.loadFallbackMessages(lang);
                }
            });

            this.isInitialized = true;
            console.log(`‚úÖ Localization initialized with ${this.messages.size} languages`);

        } catch (error) {
            console.error('‚ùå Localization initialization failed, using English fallback:', error.message);
            this.loadFallbackMessages('en');
            this.isInitialized = true;
        }
    }

    loadLanguage(languageCode) {
        try {
            const filePath = path.join(__dirname, '..', 'locales', `${languageCode}.json`);

            if (fs.existsSync(filePath)) {
                const data = fs.readFileSync(filePath, 'utf8');
                const messages = JSON.parse(data);
                this.messages.set(languageCode, messages);
                console.log(`üìö Loaded ${languageCode} locale from file`);
            } else {
                throw new Error(`Locale file not found: ${filePath}`);
            }
        } catch (error) {
            console.warn(`‚ö†Ô∏è Loading ${languageCode} from fallback`);
            this.loadFallbackMessages(languageCode);
        }
    }

    loadFallbackMessages(languageCode) {
        const fallbackMessages = {
            'en': {
                commands: {
                    start: {
                        welcome: "üåø‚ú® *Greetings, {username}!* ‚ú®üåø\n\n*Moss the Green Keeper awakens from the ancient grimoire...*\n\nüçÑ I am the guardian of this enchanted recipe tome! Within these pages lie the culinary secrets of countless realms and kitchens.\n\nüîÆ *Current magical abilities:*\n- Conversing with fellow cooks\n- Extracting recipes from cooking videos\n- Organizing recipes in your collection\n\nüåç *Language Magic:* I automatically adapted to your language! Use /language to change it anytime.\n\n*Send /help to view my spell book, dear cook!* üìú‚ö°",
                        language_auto_detected: "üîç **Language Auto-Detected!**\n\nI noticed your Telegram is set to {detected_language}, so I'm speaking {detected_language} with you!\n\nüåç *Want to change?* Use /language anytime\n‚ú® *All recipes and responses will be in your preferred language*"
                    },
                    language: {
                        choose: "üåç **Choose Your Language** üåç\n\nüó£Ô∏è **Current:** {current_language}\nüîÑ **Select new language for recipes and interface:",
                        changed: "‚úÖ **Language Updated** ‚úÖ\n\n{language_flag} **New Language:** {language_name}\nüîÑ **Recipe extraction will now use this language**\nüåø **Interface updated for future interactions**\nüì± **Command menu updated to your language**\n\n*Moss adapts to your linguistic preferences!* ‚ú®"
                    },
                    ping: {
                        response: "üèì *Pong!* ‚ö°\n\nüåø Moss is awake and ready!\n‚è±Ô∏è Response time: {response_time}ms\nüåç Speaking: {current_language}"
                    }
                }
            },
            'pl': {
                commands: {
                    start: {
                        welcome: "üåø‚ú® *Witaj, {username}!* ‚ú®üåø\n\n*Moss, Zielony Stra≈ºnik budzi siƒô z pradawnego grimoire...*\n\nüçÑ Jestem stra≈ºnikiem tego zaczarowanego tomu przepis√≥w! W tych kartach kryjƒÖ siƒô kulinarne sekrety niezliczonych krain i kuchni.\n\nüîÆ *Obecne magiczne umiejƒôtno≈õci:*\n- Rozmowy z innymi kucharzami\n- Wydobywanie przepis√≥w z film√≥w kulinarnych\n- Organizowanie przepis√≥w w kolekcji\n\nüåç *Magia Jƒôzykowa:* Automatycznie dostosowa≈Çem siƒô do twojego jƒôzyka! U≈ºyj /language aby zmieniƒá w dowolnym momencie.\n\n*Wy≈õlij /help aby zobaczyƒá ksiƒôgƒô zaklƒôƒá, drogi kucharzu!* üìú‚ö°",
                        language_auto_detected: "üîç **Jƒôzyk Automatycznie Wykryty!**\n\nZauwa≈ºy≈Çem, ≈ºe tw√≥j Telegram jest ustawiony na {detected_language}, wiƒôc rozmawiam z tobƒÖ po {detected_language}!\n\nüåç *Chcesz zmieniƒá?* U≈ºyj /language w dowolnym momencie\n‚ú® *Wszystkie przepisy i odpowiedzi bƒôdƒÖ w twoim preferowanym jƒôzyku*"
                    },
                    language: {
                        choose: "üåç **Wybierz Sw√≥j Jƒôzyk** üåç\n\nüó£Ô∏è **Obecny:** {current_language}\nüîÑ **Wybierz nowy jƒôzyk dla przepis√≥w i interfejsu:**",
                        changed: "‚úÖ **Jƒôzyk Zaktualizowany** ‚úÖ\n\n{language_flag} **Nowy Jƒôzyk:** {language_name}\nüîÑ **Wydobywanie przepis√≥w bƒôdzie teraz u≈ºywaƒá tego jƒôzyka**\nüåø **Interfejs zaktualizowany dla przysz≈Çych interakcji**\nüì± **Menu komend zaktualizowane do twojego jƒôzyka**\n\n*Moss dostosowuje siƒô do twoich preferencji jƒôzykowych!* ‚ú®"
                    },
                    ping: {
                        response: "üèì *Pong!* ‚ö°\n\nüåø Moss jest czujny i gotowy!\n‚è±Ô∏è Czas odpowiedzi: {response_time}ms\nüåç M√≥wiƒô: {current_language}"
                    }
                }
            },
            'uk': {
                commands: {
                    start: {
                        welcome: "üåø‚ú® *–í—ñ—Ç–∞—é, {username}!* ‚ú®üåø\n\n*–ú–æ—Å, –ó–µ–ª–µ–Ω–∏–π –•—Ä–∞–Ω–∏—Ç–µ–ª—å –ø—Ä–æ–∫–∏–¥–∞—î—Ç—å—Å—è –∑ –¥–∞–≤–Ω—å–æ–≥–æ –≥—Ä–∏–º—É–∞—Ä—É...*\n\nüçÑ –Ø —Ö—Ä–∞–Ω–∏—Ç–µ–ª—å —Ü—å–æ–≥–æ –∑–∞—á–∞—Ä–æ–≤–∞–Ω–æ–≥–æ —Ç–æ–º—É —Ä–µ—Ü–µ–ø—Ç—ñ–≤! –ù–∞ —Ü–∏—Ö —Å—Ç–æ—Ä—ñ–Ω–∫–∞—Ö –ø—Ä–∏—Ö–æ–≤–∞–Ω—ñ –∫—É–ª—ñ–Ω–∞—Ä–Ω—ñ —Å–µ–∫—Ä–µ—Ç–∏ –Ω–µ–∑–ª—ñ—á–µ–Ω–Ω–∏—Ö —Å–≤—ñ—Ç—ñ–≤ —Ç–∞ –∫—É—Ö–æ–Ω—å.\n\nüîÆ *–ü–æ—Ç–æ—á–Ω—ñ –º–∞–≥—ñ—á–Ω—ñ –∑–¥—ñ–±–Ω–æ—Å—Ç—ñ:*\n- –†–æ–∑–º–æ–≤–∏ –∑ —ñ–Ω—à–∏–º–∏ –∫—É—Ö–∞—Ä—è–º–∏\n- –í–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è —Ä–µ—Ü–µ–ø—Ç—ñ–≤ –∑ –∫—É–ª—ñ–Ω–∞—Ä–Ω–∏—Ö –≤—ñ–¥–µ–æ\n- –û—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—è —Ä–µ—Ü–µ–ø—Ç—ñ–≤ —É –∫–æ–ª–µ–∫—Ü—ñ—ó\n\nüåç *–ú–æ–≤–Ω–∞ –ú–∞–≥—ñ—è:* –Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∞–¥–∞–ø—Ç—É–≤–∞–≤—Å—è –¥–æ –≤–∞—à–æ—ó –º–æ–≤–∏! –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /language —â–æ–± –∑–º—ñ–Ω–∏—Ç–∏ –≤ –±—É–¥—å-—è–∫–∏–π —á–∞—Å.\n\n*–ù–∞–¥—ñ—à–ª—ñ—Ç—å /help —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–Ω–∏–≥—É –∑–∞–∫–ª–∏–Ω–∞–Ω—å, –¥–æ—Ä–æ–≥–∏–π –∫—É—Ö–∞—Ä!* üìú‚ö°",
                        language_auto_detected: "üîç **–ú–æ–≤—É –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –í–∏—è–≤–ª–µ–Ω–æ!**\n\n–Ø –ø–æ–º—ñ—Ç–∏–≤, —â–æ –≤–∞—à Telegram –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π –Ω–∞ {detected_language}, —Ç–æ–º—É —è —Ä–æ–∑–º–æ–≤–ª—è—é {detected_language} –∑ –≤–∞–º–∏!\n\nüåç *–•–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏?* –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /language –≤ –±—É–¥—å-—è–∫–∏–π —á–∞—Å\n‚ú® *–í—Å—ñ —Ä–µ—Ü–µ–ø—Ç–∏ —Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –±—É–¥—É—Ç—å –≤–∞—à–æ—é –±–∞–∂–∞–Ω–æ—é –º–æ–≤–æ—é*"
                    },
                    language: {
                        choose: "üåç **–í–∏–±–µ—Ä—ñ—Ç—å –í–∞—à—É –ú–æ–≤—É** üåç\n\nüó£Ô∏è **–ü–æ—Ç–æ—á–Ω–∞:** {current_language}\nüîÑ **–í–∏–±–µ—Ä—ñ—Ç—å –Ω–æ–≤—É –º–æ–≤—É –¥–ª—è —Ä–µ—Ü–µ–ø—Ç—ñ–≤ —Ç–∞ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É:**",
                        changed: "‚úÖ **–ú–æ–≤—É –û–Ω–æ–≤–ª–µ–Ω–æ** ‚úÖ\n\n{language_flag} **–ù–æ–≤–∞ –ú–æ–≤–∞:** {language_name}\nüîÑ **–í–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è —Ä–µ—Ü–µ–ø—Ç—ñ–≤ —Ç–µ–ø–µ—Ä –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏–º–µ —Ü—é –º–æ–≤—É**\nüåø **–Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –º–∞–π–±—É—Ç–Ω—ñ—Ö –≤–∑–∞—î–º–æ–¥—ñ–π**\nüì± **–ú–µ–Ω—é –∫–æ–º–∞–Ω–¥ –æ–Ω–æ–≤–ª–µ–Ω–æ –¥–æ –≤–∞—à–æ—ó –º–æ–≤–∏**\n\n*–ú–æ—Å –∞–¥–∞–ø—Ç—É—î—Ç—å—Å—è –¥–æ –≤–∞—à–∏—Ö –º–æ–≤–Ω–∏—Ö –≤–ø–æ–¥–æ–±–∞–Ω—å!* ‚ú®"
                    },
                    ping: {
                        response: "üèì *–ü–æ–Ω–≥!* ‚ö°\n\nüåø –ú–æ—Å –ø–∏–ª—å–Ω–∏–π —ñ –≥–æ—Ç–æ–≤–∏–π!\n‚è±Ô∏è –ß–∞—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {response_time}–º—Å\nüåç –†–æ–∑–º–æ–≤–ª—è—é: {current_language}"
                    }
                }
            }
        };

        this.messages.set(languageCode, fallbackMessages[languageCode] || fallbackMessages['en']);
    }

    getMessage(key, languageCode = 'en', interpolations = {}) {
        if (!this.isInitialized) {
            this.initialize();
        }

        const lang = this.messages.has(languageCode) ? languageCode : this.defaultLanguage;
        const langMessages = this.messages.get(lang) || this.messages.get(this.defaultLanguage);

        if (!langMessages) {
            return key;
        }

        const message = this.getNestedProperty(langMessages, key);

        if (!message) {
            const fallbackMessages = this.messages.get(this.defaultLanguage);
            const fallbackMessage = this.getNestedProperty(fallbackMessages, key);
            return fallbackMessage ? this.interpolateMessage(fallbackMessage, interpolations) : key;
        }

        return this.interpolateMessage(message, interpolations);
    }

    getNestedProperty(obj, key) {
        return key.split('.').reduce((current, prop) => {
            return current && current[prop] !== undefined ? current[prop] : null;
        }, obj);
    }

    interpolateMessage(message, interpolations = {}) {
        return message.replace(/\{(\w+)\}/g, (match, key) => {
            return interpolations[key] !== undefined ? interpolations[key] : match;
        });
    }

    detectTelegramLanguage(ctx) {
        const telegramLang = ctx.from?.language_code;
        if (!telegramLang) {
            return this.defaultLanguage;
        }

        const baseLang = telegramLang.split('-')[0];
        if (this.supportedLanguages.includes(baseLang)) {
            console.log(`üîç Auto-detected Telegram language: ${baseLang}`);
            return baseLang;
        }

        console.log(`üîç Telegram language ${baseLang} not supported, falling back to ${this.defaultLanguage}`);
        return this.defaultLanguage;
    }

    getLanguageInfo(languageCode) {
        const languageNames = {
            'en': { name: 'English', nativeName: 'English', flag: 'üá¨üáß' },
            'pl': { name: 'Polish', nativeName: 'Polski', flag: 'üáµüá±' },
            'uk': { name: 'Ukrainian', nativeName: '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞', flag: 'üá∫üá¶' },
            'de': { name: 'German', nativeName: 'Deutsch', flag: 'üá©üá™' },
            'fr': { name: 'French', nativeName: 'Fran√ßais', flag: 'üá´üá∑' },
            'es': { name: 'Spanish', nativeName: 'Espa√±ol', flag: 'üá™üá∏' },
            'it': { name: 'Italian', nativeName: 'Italiano', flag: 'üáÆüáπ' },
            'ru': { name: 'Russian', nativeName: '–†—É—Å—Å–∫–∏–π', flag: 'üá∑üá∫' }
        };

        const info = languageNames[languageCode] || languageNames[this.defaultLanguage];
        return `${info.flag} ${info.nativeName}`;
    }

    getLanguageDetails(languageCode) {
        const details = {
            'en': { name: 'English', nativeName: 'English', flag: 'üá¨üáß' },
            'pl': { name: 'Polish', nativeName: 'Polski', flag: 'üáµüá±' },
            'uk': { name: 'Ukrainian', nativeName: '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞', flag: 'üá∫üá¶' },
            'de': { name: 'German', nativeName: 'Deutsch', flag: 'üá©üá™' },
            'fr': { name: 'French', nativeName: 'Fran√ßais', flag: 'üá´üá∑' },
            'es': { name: 'Spanish', nativeName: 'Espa√±ol', flag: 'üá™üá∏' },
            'it': { name: 'Italian', nativeName: 'Italiano', flag: 'üáÆüáπ' },
            'ru': { name: 'Russian', nativeName: '–†—É—Å—Å–∫–∏–π', flag: 'üá∑üá∫' }
        };

        return details[languageCode] || details[this.defaultLanguage];
    }

    getSupportedLanguages() {
        return this.supportedLanguages.map(code => ({
            code,
            ...this.getLanguageDetails(code)
        }));
    }

    isLanguageSupported(languageCode) {
        return this.supportedLanguages.includes(languageCode);
    }

    botMessage(ctx, messageKey, interpolations = {}) {
        const userLang = ctx.dbUser?.preferred_language || this.defaultLanguage;
        return this.getMessage(messageKey, userLang, interpolations);
    }
}

// singleton instance
const localizationService = new LocalizationService();

module.exports = localizationService;